package com.suchasplus.nmea.util;

import com.suchasplus.nmea.type.ManufacturerCodes;
import com.suchasplus.nmea.type.SentenceIdentifiers;
import com.suchasplus.nmea.type.TalkerIdentifiers;

import java.util.HashMap;

/**
 * Powered by suchasplus@gmail.com on 2016/1/18.
 */
@SuppressWarnings("unused")
public final class NmeaConst {

    public static final String StandartID = "NMEA 0183 2.0";
    public static final int MaxFullSentenceLength = 255; //82;
    public static final int MaxSentenceLength = 252; //79;
    public static final char SentenceStartDelimiter = '$';
    public static final String SentenceEndDelimiter = "\r\n";
    public static final char FieldDelimiter = ',';
    public static final char CheckSumFieldDelimiter = '*';

    private static char[] arrayBrackets = new char[] { '[', ']' };
    public static String arrayOpenBracket = "[";
    public static String arrayCloseBracket = "]";
    public static char[] formatTokenDelimiters = new char[] { ',' };
    public static char[] formatEnumDelimiters = new char[] { '|' };
    private static String formatEnumPairDelimiter = "=";
    public static char[] formatEnumPairDelimiters = new char[] { '=' };
    private static String etcFormat = "...";

    private static HashMap<TalkerIdentifiers, String> TalkerDescriptions = new HashMap<>();
    static
    {
        TalkerDescriptions.put(TalkerIdentifiers.AG, "Autopilot - General");
        TalkerDescriptions.put(TalkerIdentifiers.AP, "Autopilot - Magnetic");
        TalkerDescriptions.put(TalkerIdentifiers.CD, "Communications - Digital Selective Calling (DSC)");
        TalkerDescriptions.put(TalkerIdentifiers.CR, "Communications - Receiver / Beacon Receiver");
        TalkerDescriptions.put(TalkerIdentifiers.CS, "Communications - Sattelite");
        TalkerDescriptions.put(TalkerIdentifiers.CT, "Communications - Radio-Telephone (MF/HF)");
        TalkerDescriptions.put(TalkerIdentifiers.CV, "Communications - Radio-Telephone (VHF)");
        TalkerDescriptions.put(TalkerIdentifiers.CX, "Communications - Scanning Receiver");
        TalkerDescriptions.put(TalkerIdentifiers.DF, "Direction Finder");
        TalkerDescriptions.put(TalkerIdentifiers.EC, "Electronic Chart Display & Information System (ECDIS)");
        TalkerDescriptions.put(TalkerIdentifiers.EP, "Emergency Position Indicating Beacon (EPIRB)");
        TalkerDescriptions.put(TalkerIdentifiers.ER, "Engine Room Monitoring Systems");
        TalkerDescriptions.put(TalkerIdentifiers.GP, "Global Positioning System (GPS)");
        TalkerDescriptions.put(TalkerIdentifiers.HC, "Heading - Magnetic Compass");
        TalkerDescriptions.put(TalkerIdentifiers.HE, "Heading - North Seeking Gyro");
        TalkerDescriptions.put(TalkerIdentifiers.HN, "Heading - Non North Seeking Gyro");
        TalkerDescriptions.put(TalkerIdentifiers.II, "Integrated instrumentation");
        TalkerDescriptions.put(TalkerIdentifiers.IN, "Integrated Navigation");
        TalkerDescriptions.put(TalkerIdentifiers.LC, "Loran C");
        TalkerDescriptions.put(TalkerIdentifiers.P, "Proprietary Code");
        TalkerDescriptions.put(TalkerIdentifiers.RA, "RADAR and/or ARPA");
        TalkerDescriptions.put(TalkerIdentifiers.SD, "Sounder, Depth");
        TalkerDescriptions.put(TalkerIdentifiers.SN, "Electronic Positioning System, other/general");
        TalkerDescriptions.put(TalkerIdentifiers.SS, "Souder, Scanning");
        TalkerDescriptions.put(TalkerIdentifiers.TI, "Turn Rate Indicator");
        TalkerDescriptions.put(TalkerIdentifiers.VD, "Velocity Sensor, Doppler, other/general");
        TalkerDescriptions.put(TalkerIdentifiers.DM, "Velocity Sensor, Speed Log, Water, Magnetic");
        TalkerDescriptions.put(TalkerIdentifiers.VW, "Velocity Sensor, Speed Log, Water, Mechanical");
        TalkerDescriptions.put(TalkerIdentifiers.WI, "Weather Instruments");
        TalkerDescriptions.put(TalkerIdentifiers.YX, "Transduser");
        TalkerDescriptions.put(TalkerIdentifiers.ZA, "Timekeeper - Atomic Clock");
        TalkerDescriptions.put(TalkerIdentifiers.ZC, "Timekeeper - Chronometer");
        TalkerDescriptions.put(TalkerIdentifiers.ZQ, "Timekeeper - Quartz");
        TalkerDescriptions.put(TalkerIdentifiers.ZV, "Radio Update, WWV or WWVH");

    }

    private static HashMap<SentenceIdentifiers, String> SentencesDescriptions = new HashMap<>();
    static
    {
        SentencesDescriptions.put(SentenceIdentifiers.AAM, "Waypoint Arrival Alarm");
        SentencesDescriptions.put(SentenceIdentifiers.ALM, "GPS Almanac Data");
        SentencesDescriptions.put(SentenceIdentifiers.APB, "Autopilot Sentence \"B\"");
        SentencesDescriptions.put(SentenceIdentifiers.APA, "Autopilot Sentence \"A\"");
        SentencesDescriptions.put(SentenceIdentifiers.ASD, "Autopilot System Data");
        SentencesDescriptions.put(SentenceIdentifiers.BEC, "Bearing & Distance to Waypoint, Dead reckoning");
        SentencesDescriptions.put(SentenceIdentifiers.BOD, "Bearing, Origin to Destination");
        SentencesDescriptions.put(SentenceIdentifiers.BWC, "Bearing & Distance to Waypoint, Great Circle");
        SentencesDescriptions.put(SentenceIdentifiers.BWR, "Bearing & Distance to Waypoint, Rhumb Line");
        SentencesDescriptions.put(SentenceIdentifiers.BWW, "Bearing, Waypoint to Waypoint");
        SentencesDescriptions.put(SentenceIdentifiers.DBK, "Depth Below Keel");
        SentencesDescriptions.put(SentenceIdentifiers.DBS, "Depth Below Surface");
        SentencesDescriptions.put(SentenceIdentifiers.DBT, "Depth Below Transduser");
        SentencesDescriptions.put(SentenceIdentifiers.DCN, "[Obsolete] Decca Position");
        SentencesDescriptions.put(SentenceIdentifiers.DPT, "Depth");
        SentencesDescriptions.put(SentenceIdentifiers.DSC, "Digital Selective Calling Information");
        SentencesDescriptions.put(SentenceIdentifiers.DSE, "Extended DSC");
        SentencesDescriptions.put(SentenceIdentifiers.DSI, "DSC Transponder Initiate");
        SentencesDescriptions.put(SentenceIdentifiers.DSR, "DSC Transponder Response");
        SentencesDescriptions.put(SentenceIdentifiers.DTM, "Datum Reference");
        SentencesDescriptions.put(SentenceIdentifiers.FSI, "Frequency Set Information");
        SentencesDescriptions.put(SentenceIdentifiers.GBS, "GBS Satellite Fault Detection");
        SentencesDescriptions.put(SentenceIdentifiers.GGA, "Global Positioning System Fix Data");
        SentencesDescriptions.put(SentenceIdentifiers.GLC, "Geographic Position, Loran-C");
        SentencesDescriptions.put(SentenceIdentifiers.GLL, "Geographic Position, Latitude/Longitude");
        SentencesDescriptions.put(SentenceIdentifiers.GRS, "GPS Range Residuals");
        SentencesDescriptions.put(SentenceIdentifiers.GSA, "GPS DOP and Active Satellites");
        SentencesDescriptions.put(SentenceIdentifiers.GST, "GPS Pseudorange Noise Statistics");
        SentencesDescriptions.put(SentenceIdentifiers.GSV, "GPS Sattelites in View");
        SentencesDescriptions.put(SentenceIdentifiers.GTD, "Geograpic Location in Time Differences");
        SentencesDescriptions.put(SentenceIdentifiers.GXA, "Transit Position");
        SentencesDescriptions.put(SentenceIdentifiers.HDG, "Heading, Deviation & Variation");
        SentencesDescriptions.put(SentenceIdentifiers.HDM, "Heading, Magnetic");
        SentencesDescriptions.put(SentenceIdentifiers.HDT, "Heading, True");
        SentencesDescriptions.put(SentenceIdentifiers.HSC, "Heading Steering Command");
        SentencesDescriptions.put(SentenceIdentifiers.LCD, "Loran-C Signal Data");
        SentencesDescriptions.put(SentenceIdentifiers.MSK, "MSK Receiver Interface (for DGPS Beacon Receivers)");
        SentencesDescriptions.put(SentenceIdentifiers.MSS, "MSK Receiver Signal Status");
        SentencesDescriptions.put(SentenceIdentifiers.MTW, "Water Temperature");
        SentencesDescriptions.put(SentenceIdentifiers.MWD, "Wind Direction & Speed");
        SentencesDescriptions.put(SentenceIdentifiers.MWV, "Wind Speed & Angle");
        SentencesDescriptions.put(SentenceIdentifiers.OLN, "[Obsolete] Omega Line Numbers");
        SentencesDescriptions.put(SentenceIdentifiers.OSD, "Own Ship Data");
        SentencesDescriptions.put(SentenceIdentifiers.RMA, "Recommend Minimum Specific Loran-C Data");
        SentencesDescriptions.put(SentenceIdentifiers.RMB, "Recommend Minimum Navigation Information");
        SentencesDescriptions.put(SentenceIdentifiers.RMC, "Recommend Minimum Specific GPS/TRANSIT Data");
        SentencesDescriptions.put(SentenceIdentifiers.ROO, "Waypoints in Active Route");
        SentencesDescriptions.put(SentenceIdentifiers.ROT, "Rate of Turn");
        SentencesDescriptions.put(SentenceIdentifiers.RPM, "Revolutions");
        SentencesDescriptions.put(SentenceIdentifiers.RSA, "Rudder Sensor Angle");
        SentencesDescriptions.put(SentenceIdentifiers.RSD, "RADAR System Data");
        SentencesDescriptions.put(SentenceIdentifiers.RTE, "Routes");
        SentencesDescriptions.put(SentenceIdentifiers.SFI, "Scanning Frequency Information");
        SentencesDescriptions.put(SentenceIdentifiers.STN, "Multiple Data ID");
        SentencesDescriptions.put(SentenceIdentifiers.TLL, "Target Latitude & Longitude");
        SentencesDescriptions.put(SentenceIdentifiers.TRF, "[Obsolete] TRANSIT Fix Data");
        SentencesDescriptions.put(SentenceIdentifiers.TTM, "Tracked Target Message");
        SentencesDescriptions.put(SentenceIdentifiers.VBW, "Dual Ground/Water Speed");
        SentencesDescriptions.put(SentenceIdentifiers.VDR, "Set and Drift");
        SentencesDescriptions.put(SentenceIdentifiers.VHW, "Water Speed and Heading");
        SentencesDescriptions.put(SentenceIdentifiers.VLW, "Distance Traveled through Water");
        SentencesDescriptions.put(SentenceIdentifiers.VPW, "Speed, Measured Parallel to Wind");
        SentencesDescriptions.put(SentenceIdentifiers.VTG, "Track Made Good and Ground Speed");
        SentencesDescriptions.put(SentenceIdentifiers.VWR, "Relative Wind Speed & Angle");
        SentencesDescriptions.put(SentenceIdentifiers.WCV, "Waypoint Closure Velocity");
        SentencesDescriptions.put(SentenceIdentifiers.WDC, "Distance to Waypoint, Great Circle");
        SentencesDescriptions.put(SentenceIdentifiers.WDR, "Distance to Waypoint, Rhumb Line");
        SentencesDescriptions.put(SentenceIdentifiers.WNC, "Distance, Waypoint to Waypoint");
        SentencesDescriptions.put(SentenceIdentifiers.WPL, "Waypoint Location");
        SentencesDescriptions.put(SentenceIdentifiers.XDR, "Transducer Measurement");
        SentencesDescriptions.put(SentenceIdentifiers.XTE, "Cross-Track Error, Measured");
        SentencesDescriptions.put(SentenceIdentifiers.XTR, "Cross-Track Error, Dead Reckoning");
        SentencesDescriptions.put(SentenceIdentifiers.ZDA, "Time & Date");
        SentencesDescriptions.put(SentenceIdentifiers.ZDL, "Time & Distance to Variable Point");
        SentencesDescriptions.put(SentenceIdentifiers.ZFO, "UTC & Time from Origin Waypoint");
        SentencesDescriptions.put(SentenceIdentifiers.ZTG, "UTC & Time to Destination Waypoint");
    }

    private static HashMap<Integer, String> Datums = new HashMap<>();
    static
    {
        Datums.put(0, "WGS1984 (International)");
        Datums.put(1, "Tokyo (Japan)");
        Datums.put(2, "Tokyo (Mean for Japan, South Korea, Okinawa)");
        Datums.put(3, "User setting");
        Datums.put(4, "Adindan (Burkina Faso)");
        Datums.put(5, "Adindan (Cameroon)");
        Datums.put(6, "Adindan (Ethiopia)");
        Datums.put(7, "Adindan (Mali)");
        Datums.put(8, "Adindan (Mean for Ethiopia, Sudan)");
        Datums.put(9, "Adindan (Senegal)");
        Datums.put(10, "Adindan (Sudan)");
        Datums.put(11, "Afgooye (Somalia)");
        Datums.put(12, "Ain El Abd1970 (Bahrain)");
        Datums.put(13, "Ain El Abd1970 (Saudi Arabia)");
        Datums.put(14, "American Samoa1962 (American Samoa islands)");
        Datums.put(15, "Anna 1 Astro1965 (Cocos Island)");
        Datums.put(16, "Antigua Island Astro1943 (Antigua (Leeward Islands))");
        Datums.put(17, "Arc1950 (Botswana)");
        Datums.put(18, "Arc1950 (Burundi)");
        Datums.put(19, "Arc1950 (Lesotho)");
        Datums.put(20, "Arc1950 (Malawi)");
        Datums.put(21, "Arc1950 (Mean for Botswana, Lesotho, Malawi, Swaziland, Zaire, Zambia, Zimbabwe)");
        Datums.put(22, "Arc1950 (Swaziland)");
        Datums.put(23, "Arc1950 (Zaire)");
        Datums.put(24, "Arc1950 (Zambia)");
        Datums.put(25, "Arc1950 (Zimbabwe)");
        Datums.put(26, "Arc1960 (Mean for Kenya Tanzania)");
        Datums.put(27, "Arc1960 (Kenya)");
        Datums.put(28, "Arc1960 (Tanzania)");
        Datums.put(29, "Ascension Island 1958 (Ascension Island)");
        Datums.put(30, "Astro Beacon E 1945 (Iwo Jima)");
        Datums.put(31, "Astro Dos 71/4 (St Helena Island)");
        Datums.put(32, "Astro Tern Island (FRIG) 1961 (Tern Island)");
        Datums.put(33, "Astronomical Station 1952 (Marcus Island)");
        Datums.put(34, "Australian Geodetic 1966 (Mercus Island)");
        Datums.put(35, "Australian Geodetic 1984 (Australia, Tasmania)");
        Datums.put(36, "Ayabelle Lighthouse (Djibouti)");
        Datums.put(37, "Bellevue (IGN) (Efate and Erromango Islands)");
        Datums.put(38, "Bermuda 1957 (Bermuda)");
        Datums.put(39, "Bissau (Guuinea-Bissau)");
        Datums.put(40, "Bogota Observatory (Colombia)");
        Datums.put(41, "Bukit Rimpah (Indonesia (Bangka and Belitung Ids))");
        Datums.put(42, "Camp Area Astro (Antarctica (McMurdi Camp Area))");
        Datums.put(43, "Campo Inchauspe (Argentina)");
        Datums.put(44, "Canton Astro1966 (Phoenix Island)");
        Datums.put(45, "Cape (South Africa)");
        Datums.put(46, "Cape Canaveral (Bahamas, Florida)");
        Datums.put(47, "Carthage (Tunisia)");
        Datums.put(48, "Chatham Island Astro1971 (New Zealand(Chatham Island))");
        Datums.put(49, "Chua Astro (Paraguay)");
        Datums.put(50, "Corrego Alegre (Brazil)");
        Datums.put(51, "Dabola (Guinea)");
        Datums.put(52, "Deception Island (Deception Island, Antarctica)");
        Datums.put(53, "Djakarta (Batavia) (Indonesia (Sumatra))");
        Datums.put(54, "Dos 1968 (New Georgia Islands (Gizo Island)");
        Datums.put(55, "Easter Island 1967 (Easter Island)");
        Datums.put(56, "Estonia Coordinate System 1937 (Estonia)");
        Datums.put(57, "European 1950 (Cyprus)");
        Datums.put(58, "European 1950 (Egypt)");
        Datums.put(59, "European 1950 (England, Channel Isnalds, Scotland, Shetland Islands)");
        Datums.put(60, "European 1950 (England, Ireland, Scotland, Shetland Islands)");
        Datums.put(61, "European 1950 (Finland, Norway");
        Datums.put(62, "European 1950 (Greece)");
        Datums.put(63, "European 1950 (Iran)");
        Datums.put(64, "European 1950 (Italy (Sardinia))");
        Datums.put(65, "European 1950 (Italy (Sicily))");
        Datums.put(66, "European 1950 (Malta)");
        Datums.put(67, "European 1950 (Mean for Austria, Belgium, Danmark, Finland, France, W. Germany, Gibraltar, Greece, Italy, Luxemburg, Netherlands, Norway, Portugal, Spain, Sweden, Switzerland)");
        Datums.put(68, "European 1950 (Mean for Austria, Denmark, France, W. Germany, Netherland, Switzerland)");
        Datums.put(69, "European 1950 (Mean for Iraq, Israel, Jordan, Lebanon, Kuwait, Saudi Arabia, Syria)");
        Datums.put(70, "European 1950 (Portugal, Spain)");
        Datums.put(71, "European 1950 (Tunisia)");
        Datums.put(72, "European 1950 (Mean for Austria, Finland, Netherlands, Norway, Spain, Sweden, Switzerland)");
        Datums.put(73, "Fort Thomas 1955 (Nevis St. Kitts (Leeward Islands))");
        Datums.put(74, "Gan 1970 (Republic of Maldives)");
        Datums.put(75, "Geodetic Datum 1970 (New Zeland)");
        Datums.put(76, "Graciosa Base SW1948 (Azores (Fial, Graciosa, Pico, Sao, Jorge, Terceria))");
        Datums.put(77, "Guam1963 (Guam)");
        Datums.put(78, "Gunung Segara (Indonesia (Kalimantan))");
        Datums.put(79, "Gux I Astro (Guadalcanal Island)");
        Datums.put(80, "Herat North (Afganistan)");
        Datums.put(81, "Hermannskogel Datum (Croatia-Serbia, Bosnia-Herzegovina)");
        Datums.put(82, "Hjorsey 1955 (Iceland)");
        Datums.put(83, "Hongkong 1963 (Hongkong)");
        Datums.put(84, "Hu Tzu Shan (Taiwan)");
        Datums.put(85, "Indian (Bangladesh)");
        Datums.put(86, "Indian (India, Nepal)");
        Datums.put(87, "Indian (Pakistan)");
        Datums.put(88, "Indian 1954 (Thailand)");
        Datums.put(89, "Indian 1960 (Vietnam (Con Son Island)");
        Datums.put(90, "Indian 1960 (Vietnam (Near 16 deg N))");
        Datums.put(91, "Indian 1975 (Thailand)");
        Datums.put(92, "Indonesian 1974 (Indonesian)");
        Datums.put(93, "Ireland 1965 (Ireland)");
        Datums.put(94, "ISTS 061 Astro 1968 (South Georgia Islands)");
        Datums.put(95, "ISTS 073 Astro 1969 (Diego Garcia)");
        Datums.put(96, "Johnston Island 1961 (Johnston Island)");
        Datums.put(97, "Kandawala (Sri Lanka)");
        Datums.put(98, "Kerguelen Island 1949 (Kerguelen Island)");
        Datums.put(99, "Kertau 1948 (West Malaysia and Singapore)");
        Datums.put(100, "Kusaie Astro 1951 (Caroline Island)");
        Datums.put(101, "Korean Geodetic System (South Korea)");
        Datums.put(102, "LC5 Astro 1961 (Cayman Brac Island)");
        Datums.put(103, "Leigon (Ghana)");
        Datums.put(104, "Liberia 1964 (Liberia)");
        Datums.put(105, "Luzon (Philippines (Excluding Mindanao))");
        Datums.put(106, "Luzon (Philippines (Mindanao))");
        Datums.put(107, "M\'Poraloko (Gabon)");
        Datums.put(108, "Mahe 1971 (Mahe Island)");
        Datums.put(109, "Massawa (Ethopia (Eritrea))");
        Datums.put(110, "Merchich (Morocco)");
        Datums.put(111, "Midway Astro 1961 (Midway Islands)");
        Datums.put(112, "Minna (Cameroon)");
        Datums.put(113, "Minna (Nigeria)");
        Datums.put(114, "Montserrat Island Astro 1958 (Monserat (Leeward Island))");
        Datums.put(115, "Nahrwan (Oman (Masirah Island))");
        Datums.put(116, "Nahrwan (Saudi Arabia)");
        Datums.put(117, "Nahrwan (United Arab Emirates)");
        Datums.put(118, "Naparima BWI (Trinidad and Tobago)");
        Datums.put(119, "North American 1927 (Alaska (Excluding Aleutian Islands))");
        Datums.put(120, "North American 1927 (Alaska (Aleutian Islands East of 180 deg. W)");
        Datums.put(121, "North American 1927 (Alaska (Aleutian Islands West of 180 deg. W)");
        Datums.put(122, "North American 1927 (Bahamas (Except San Salvador Islands))");
        Datums.put(123, "North American 1927 (Bahamas (San Salvador Islands))");
        Datums.put(124, "North American 1927 (Canada (Alberta, British Columbia))");
        Datums.put(125, "North American 1927 (Canada (Manitoba, Ontario))");
        Datums.put(126, "North American 1927 (Canada (New Brunswick, Newfoundland, Nova Scotia, Quebec))");
        Datums.put(127, "North American 1927 (Canada (Northwest Territories, Saskatchewan))");
        Datums.put(128, "North American 1927 (Canada (Youkon))");
        Datums.put(129, "North American 1927 (Canal Zone)");
        Datums.put(130, "North American 1927 (Cuba)");
        Datums.put(131, "North American 1927 (Greenland (Hayes Peninsula))");
        Datums.put(132, "North American 1927 (Mean for Antigua, Barbados, Barbuda, Caicos Islands, Cuba, Dominican, Grand Cayman, Jamaica, Turks Islands)");
        Datums.put(133, "North American 1927 (Mean for Belize, Costa Rica, El Salvador, Guatemala, Honduras, Nicaragua)");
        Datums.put(134, "North American 1927 (Mean for Canada)");
        Datums.put(135, "North American 1927 (Mean for Conus)");
        Datums.put(136, "North American 1927 (Mean for Conus (East of Mississippi, River Including Louisiana, Missouri, Minnesota)");
        Datums.put(137, "North American 1927 (Mean for Conus (West of Mississippi, River Excluding Louisiana, Missouri, Minnesota)");
        Datums.put(138, "North American 1927 (Mexico)");
        Datums.put(139, "North American 1983 (Alaska (Excluding Aleutian Islands))");
        Datums.put(140, "North American 1983 (Aleutian Islands)");
        Datums.put(141, "North American 1983 (Canada)");
        Datums.put(142, "North American 1983 (Conus)");
        Datums.put(143, "North American 1983 (Hahawii)");
        Datums.put(144, "North American 1983 (Mexico, Central America)");
        Datums.put(145, "North Sahara 1959 (Algeria)");
        Datums.put(146, "Observatorio Meteorologico 1939 (Azores (Corvo and Flores Islands))");
        Datums.put(147, "Old Egyptian 1907 (Egypt)");
        Datums.put(148, "Old Hawaiian (Hawaii)");
        Datums.put(149, "Old Hawaiian (Kauai)");
        Datums.put(150, "Old Hawaiian (Maui)");
        Datums.put(151, "Old Hawaiian (Mean for Hawaii, Kauai, Maui, Oahu)");
        Datums.put(152, "Old Hawaiian (Oahu)");
        Datums.put(153, "Oman (Oman)");
        Datums.put(154, "Ordnance Survey Great Britain 1936 (England)");
        Datums.put(155, "Ordnance Survey Great Britain 1936 (England, Isle of Man, Wales)");
        Datums.put(156, "Ordnance Survey Great Britain 1936 (Mean for England, Isle of Man, Scotland, Shetland Islands, Wales)");
        Datums.put(157, "Ordnance Survey Great Britain 1936 (Scotland, Shetland Islands)");
        Datums.put(158, "Ordnance Survey Great Britain 1936 (Wales)");
        Datums.put(159, "Pico de las Nieves (Canary Islands)");
        Datums.put(160, "Pitcairn Astro 1967 (Pitcairn Island)");
        Datums.put(161, "Point 58 (Mean for Burkina Faso and Niger)");
        Datums.put(162, "Pointe Noire 1948 (Congo)");
        Datums.put(163, "Porto Santo 1936 (Porto Santo, Maderia Islands)");
        Datums.put(164, "Provisional South American 1956 (Bolivia)");
        Datums.put(165, "Provisional South American 1956 (Chilie (Norther Near 19 deg S))");
        Datums.put(166, "Provisional South American 1956 (Chilie (Southern Near 43 deg S))");
        Datums.put(167, "Provisional South American 1956 (Colombia)");
        Datums.put(168, "Provisional South American 1956 (Ecuador)");
        Datums.put(169, "Provisional South American 1956 (Guyana)");
        Datums.put(170, "Provisional South American 1956 (Mean for Bolivia, Chilie, Colombia, Ecuador, Guyana, Peru, Venezuela)");
        Datums.put(171, "Provisional South American 1956 (Peru)");
        Datums.put(172, "Provisional South American 1956 (Venezuela)");
        Datums.put(173, "Provisional South Chilean 1963 (Chilie (Near 53 deg S) (Hito XVIII))");
        Datums.put(174, "Puerto Rico (Puerto Rico, Virgin Islands)");
        Datums.put(175, "Pulkovo 1942 (Russia)");
        Datums.put(176, "Quatar National (Quatar)");
        Datums.put(177, "Qornoq (Greenland (South))");
        Datums.put(178, "Reunion (Mascarene Island)");
        Datums.put(179, "Rome 1940 (Italy (Sardinia))");
        Datums.put(180, "S-42 (Pulkovo 1942) (Hungary)");
        Datums.put(181, "S-42 (Pulkovo 1942) (Poland)");
        Datums.put(182, "S-42 (Pulkovo 1942) (Czechoslavakia)");
        Datums.put(183, "S-42 (Pulkovo 1942) (Latvia)");
        Datums.put(184, "S-42 (Pulkovo 1942) (Kazakhstan)");
        Datums.put(185, "S-42 (Pulkovo 1942) (Albania)");
        Datums.put(186, "S-42 (Pulkovo 1942) (Romania)");
        Datums.put(187, "S-JTSK (Czechoslavakia (Prior 1 Jan 1993))");
        Datums.put(188, "Santo (Dos) 1965 (Espirito Santo Island)");
        Datums.put(189, "Sao Braz (Azores (San Miguel, Santa Maria Islands))");
        Datums.put(190, "Sapper Hill");
        Datums.put(191, "Schwarzeck (Namibia)");
        Datums.put(192, "Selvagem Grande 1938 (Salvage Islands)");
        Datums.put(193, "Sierra Leone 1960 (Sierra Leone)");
        Datums.put(194, "South American 1969 (Argentina)");
        Datums.put(195, "South American 1969 (Bolivia)");
        Datums.put(196, "South American 1969 (Brazil)");
        Datums.put(197, "South American 1969 (Chilie)");
        Datums.put(198, "South American 1969 (Colombia)");
        Datums.put(199, "South American 1969 (Ecuador)");
        Datums.put(200, "South American 1969 (Ecuador (Baltra, Galapagos))");
        Datums.put(201, "South American 1969 (Guyana)");
        Datums.put(202, "South American 1969 (Mean for Argentina, Bolivia, Brazil, Chilie, Colombia, Ecuador, Guayana, Paraguay, Peru, Trinidad and Tobago, Venezuela)");
        Datums.put(203, "South American 1969 (Paraguay)");
        Datums.put(204, "South American 1969 (Peru)");
        Datums.put(205, "South American 1969 (Trinidad and Tobago)");
        Datums.put(206, "South American 1969 (Venezuela)");
        Datums.put(207, "South Asia (Singapore)");
        Datums.put(208, "Tananarive Observatory 1925 (Madagascar)");
        Datums.put(209, "Timbalai 1948 (Brunei, E. Malaysia (Sabah Sarawak))");
        Datums.put(210, "Tokyo (Japan)");
        Datums.put(211, "Tokyo (Mean for Japan, South Korea, Okinawa)");
        Datums.put(212, "Tokyo (Okinawa)");
        Datums.put(213, "Tokyo (South Korea)");
        Datums.put(214, "Tristan Astro 1968 (Tristam Da Cunha)");
        Datums.put(215, "Viti Levu 1916 (Fiji (Viti Levu Island))");
        Datums.put(216, "Voirol 1960 (Algeria)");
        Datums.put(217, "Wake Island Astro 1952 (Wake Atoll)");
        Datums.put(218, "Wake-Eniwetok 1960 (Marshall Islands)");
        Datums.put(219, "WGS 1972 (Global Definition)");
        Datums.put(220, "WGS 1984 (Global Definition)");
        Datums.put(221, "Yacare (Uruguay)");
        Datums.put(222, "Zanderij (Suriname)");
    }


    /**
     * Format string for sentences must be as "param_1_format, param_2_format, ..."
     * valid formats are:
     * x - integer
     * x.x - double
     * c--c - ASCII char string
     * hh - hexadecimal byte
     * hhhh - hexadecimal short int
     * hhhhhhhh - hexadecimal int
     * hhmmss.ss - time: hours, minutes, seconds, fractional part of seconds
     * llll.ll - longitude
     * yyyyy.yy - latitude
     */
    private static HashMap<SentenceIdentifiers, String> SentencesFormats = new HashMap<>();
    static
    {
        SentencesFormats.put(SentenceIdentifiers.AAM, "A=Arrival circled entered|V=V,A=Perpendicular passed at way point|V=V,x.x,N=nm|K=km,c--c");
        SentencesFormats.put(SentenceIdentifiers.ALM, "x.x,x.x,xx,x.x,hh,hhhh,hh,hhhh,hhhhhh,hhhhhh,hhhhhh,hhhhhh,hhh,hhh");
        SentencesFormats.put(SentenceIdentifiers.APB, "V=Loran-C Blink or SNR warning|A=general warning flag,V=Loran-C Cycle Lock warning flag|A=OK or not used,x.x,R=Right|L=Left,N=nm|K=km,A=Arrival circled entered|V=Invalid,A=Perpendicular passed at way point|V=Invalid,x.x,M=Magnetic|T=True,c--c,x.x,M=Magnetic|T=True,x.x,M=Magnetic|T=True");
        SentencesFormats.put(SentenceIdentifiers.APA, "V=Loran-C Blink or SNR warning|A=general warning flag,V=Loran-C Cycle Lock warning flag|A=OK or not used,x.xx,R=Right|L=Left,N=nm|K=km,A=Arrival circled entered|V=Invalid,A=Perpendicular passed at way point|V=Invalid,xxx,M=Magnetic|T=True,c---c");
        SentencesFormats.put(SentenceIdentifiers.ASD, "");
        SentencesFormats.put(SentenceIdentifiers.BEC, "hhmmss.ss,llll.ll,N=North|S=South,yyyyy.y,N=North|S=South,x.x,E=East|W=West,x.x,T=True|M=Magnetic,x.x,N=nm|K=km,c--c");
        SentencesFormats.put(SentenceIdentifiers.BOD, "x.x,T=True|M=Magnetic,x.x,T=True|M=Magnetic,c--c,c--c");
        SentencesFormats.put(SentenceIdentifiers.BWC, "hhmmss.ss,llll.ll,N=North|S=South,yyyyy.yy,E=East|W=West,x.x,T=True|M=Magnetic,x.x,T=True|M=Magnetic,x.x,N=nm|K=km,c--c");
        SentencesFormats.put(SentenceIdentifiers.BWR, "hhmmss.ss,llll.ll,N=North|S=South,yyyyy.yy,E=East|W=West,x.x,T=True|M=Magnetic,x.x,T=True|M=Magnetic,x.x,N=nm|K=km,c--c");
        SentencesFormats.put(SentenceIdentifiers.BWW, "x.x,T=True|M=Magnetic,x.x,T=True|M=Magnetic,c--c,c--c");
        SentencesFormats.put(SentenceIdentifiers.DBK, "x.x,f=ft|M=m,x.x,f=ft|M=m,x.x,F");
        SentencesFormats.put(SentenceIdentifiers.DBS, "x.x,f=ft|M=m,x.x,f=ft|M=m,x.x,F");
        SentencesFormats.put(SentenceIdentifiers.DBT, "x.x,f=ft|M=m,x.x,f=ft|M=m,x.x,F");
        SentencesFormats.put(SentenceIdentifiers.DCN, "xx,cc,x.x,A,cc,x.x,A,cc,x.x,A,A,A,A,x.x,N=nm|K=km,1=Normal pattern|2=Lane identification pattern|3=Lane identification transmissions");
        SentencesFormats.put(SentenceIdentifiers.DPT, "x.x,x.x");
        SentencesFormats.put(SentenceIdentifiers.DSC, "");
        SentencesFormats.put(SentenceIdentifiers.DSE, "");
        SentencesFormats.put(SentenceIdentifiers.DSI, "");
        SentencesFormats.put(SentenceIdentifiers.DSR, "");
        SentencesFormats.put(SentenceIdentifiers.DTM, "xxx,x,xx.xxxx,x,xx.xxxx,x,c--c,xxx");
        SentencesFormats.put(SentenceIdentifiers.FSI, "xxxxxx,xxxxxx,c,x");
        SentencesFormats.put(SentenceIdentifiers.GBS, "hhmmss.ss,x.x,x.x,x.x,x.x,x.x,x.x,x.x");
        SentencesFormats.put(SentenceIdentifiers.GGA, "hhmmss.ss,llll.ll,a,yyyyy.yy,a,0=Fix not availible|1=GPS fix|2=DGPS fix,xx,x.x,x.x,M,x.x,M,x.x,xxxx");
        SentencesFormats.put(SentenceIdentifiers.GLC, "xxxx,x.x,a,x.x,a,x.x,a,x.x,a,x.x,a,x.x,B=Blink|C=Cycle|S=SNR|A=Valid");
        SentencesFormats.put(SentenceIdentifiers.GLL, "llll.ll,N=North|S=South,yyyyy.yy,E=East|W=West,hhmmss.ss,A=Valid|V=Invalid,A=Valid|V=Invalid");
        SentencesFormats.put(SentenceIdentifiers.GRS, "hhmmss,x,x.x,x.x,x.x,x.x,x.x,x.x,x.x,x.x,x.x,x.x,x.x,x.x");
        SentencesFormats.put(SentenceIdentifiers.GSA, "M=Manual|A=Automatic,x,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,x.x,x.x,x.x");
        SentencesFormats.put(SentenceIdentifiers.GST, "hhmmss.ss,x.x,x.x,x.x,x.x,x.x,x.x,x.x");
        SentencesFormats.put(SentenceIdentifiers.GSV, "x,x,xx,xx,xx,xxx,xx,xx,xx,xxx,xx,xx,xx,xxx,xx,xx,xx,xxx,xx,");
        SentencesFormats.put(SentenceIdentifiers.GTD, "x.x,x.x,x.x,x.x,x.x");
        SentencesFormats.put(SentenceIdentifiers.GXA, "hhmmss.ss,llll.ll,a,yyyyy.yy,a,c--c,x");
        SentencesFormats.put(SentenceIdentifiers.HDG, "x.x,x.x,a,x.x,a");
        SentencesFormats.put(SentenceIdentifiers.HDM, "x.x,M");
        SentencesFormats.put(SentenceIdentifiers.HDT, "x.x,T");
        SentencesFormats.put(SentenceIdentifiers.HSC, "x.x,T,x.x,M");
        SentencesFormats.put(SentenceIdentifiers.LCD, "xxxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx");
        SentencesFormats.put(SentenceIdentifiers.MSK, "xxx.x,xx,xxx,xx,N");
        SentencesFormats.put(SentenceIdentifiers.MSS, "");
        SentencesFormats.put(SentenceIdentifiers.MTW, "x.x,C=C|K=K|F=F");
        SentencesFormats.put(SentenceIdentifiers.MWD, "");
        SentencesFormats.put(SentenceIdentifiers.MWV, "x.x,a,x.x,a,A");
        SentencesFormats.put(SentenceIdentifiers.OLN, "aa,xxx,xxx,aa,xxx,xxx,aa,xxx,xxx");
        SentencesFormats.put(SentenceIdentifiers.OSD, "x.x,A,x.x,a,x.x,a,x.x,x.x,a");
        SentencesFormats.put(SentenceIdentifiers.RMA, "A,llll.ll,N=North|S=South,yyyyy.yy,E=East|W=West,x.x,x.x,x.x,x.x,x.x,a");
        SentencesFormats.put(SentenceIdentifiers.RMB, "A,x.x,a,c--c,c--c,llll.ll,a,yyyyy.yy,a,x.x,x.x,x.x,A,A");
        SentencesFormats.put(SentenceIdentifiers.RMC, "hhmmss.ss,A,llll.ll,N=North|S=South,yyyyy.yy,E=East|W=West,x.x,x.x,ddmmyy,x.x,a,a");
        SentencesFormats.put(SentenceIdentifiers.ROO, "c---c,....");
        SentencesFormats.put(SentenceIdentifiers.ROT, "x.x,A");
        SentencesFormats.put(SentenceIdentifiers.RPM, "a,x,x.x,x.x,A");
        SentencesFormats.put(SentenceIdentifiers.RSA, "x.x,A,x.x,A");
        SentencesFormats.put(SentenceIdentifiers.RSD, "x.x,x.x,x.x,x.x,x.x,x.x,x.x,x.x,x.x,x.x,x.x,a,a");
        SentencesFormats.put(SentenceIdentifiers.RTE, "x.x,x.x,a,c--c,c--c,...");
        SentencesFormats.put(SentenceIdentifiers.SFI, "x.x,x.x,xxxxxx,c,xxxxxx,c");
        SentencesFormats.put(SentenceIdentifiers.STN, "xx");
        SentencesFormats.put(SentenceIdentifiers.TLL, "xx,llll.lll,a,yyyyy.yyy,a,c--c,hhmmss.ss,a,a");
        SentencesFormats.put(SentenceIdentifiers.TRF, "hhmmss.ss,xxxxxx,llll.ll,a,yyyyy.yy,a,x.x,x.x,x.x,x.x,xxx,A");
        SentencesFormats.put(SentenceIdentifiers.TTM, "xx,x.x,x.x,T=True|R=Relative,x.x,x.x,T=True|R=Relative,x.x,x.x,K=Km|N=Knots|S=Statue miles,c--c,L=Lost|Q=Query|T=Tracking,a,hhmmss.ss,A=Automatic|M=Manual");
        SentencesFormats.put(SentenceIdentifiers.TXT, "x,x,x,c--c");
        SentencesFormats.put(SentenceIdentifiers.VBW, "x.x,x.x,A,x.x,x.x,A");
        SentencesFormats.put(SentenceIdentifiers.VDR, "x.x,T,x.x,M,x.x,N");
        SentencesFormats.put(SentenceIdentifiers.VHW, "x.x,T,x.x,M,x.x,N,x.x,K");
        SentencesFormats.put(SentenceIdentifiers.VLW, "x.x,N,x.x,N");
        SentencesFormats.put(SentenceIdentifiers.VPW, "x.x,N,x.x,M");
        SentencesFormats.put(SentenceIdentifiers.VTG, "x.x,T,x.x,M,x.x,N=nk/h,x.x,K=Km/h,a");
        SentencesFormats.put(SentenceIdentifiers.VWR, "x.x,a,x.x,N,x.x,M,x.x,K");
        SentencesFormats.put(SentenceIdentifiers.WCV, "x.x,N,c--c");
        SentencesFormats.put(SentenceIdentifiers.WDC, "");
        SentencesFormats.put(SentenceIdentifiers.WDR, "");
        SentencesFormats.put(SentenceIdentifiers.WNC, "x.x,N,x.x,K,c--c,c--c");
        SentencesFormats.put(SentenceIdentifiers.WPL, "llll.ll,a,yyyyy.yy,a,c--c");
        SentencesFormats.put(SentenceIdentifiers.XDR, "a,x.x,a,c--c,a,x.x,a,c--c");
        SentencesFormats.put(SentenceIdentifiers.XTE, "A,A,x.x,a,N");
        SentencesFormats.put(SentenceIdentifiers.XTR, "x.x,a,N");
        SentencesFormats.put(SentenceIdentifiers.ZDA, "hhmmss.ss,xx,xx,xxxx,xx,xx");
        SentencesFormats.put(SentenceIdentifiers.ZDL, "hhmmss.ss,hhmmss.ss,c--c");
        SentencesFormats.put(SentenceIdentifiers.ZFO, "hhmmss.ss,hhmmss.ss,c--c");
        SentencesFormats.put(SentenceIdentifiers.ZTG, "hhmmss.ss,hhmmss.ss,c--c");
    }



}
